<?xml version="1.0" encoding="utf-8"?>
<ArrayOfCommand xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Command>
    <ButtonName>Youtube</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start("https://www.youtube.com/feed/subscriptions");  return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Youtube</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Twitch</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start("https://www.twitch.tv/directory");  return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Twitch</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Gmail</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start("https://mail.google.com/mail/u/0/");  return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Gmail</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Smite</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"steam://rungameid/386360"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Smite</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Overwatch</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"E:\Games\Blizzard\Overwatch Launcher.exe"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Overwatch</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Duolingo</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"https://www.duolingo.com/"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Duolingo</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Axxesse</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"C:\Users\Shane\AppData\Roaming\19028445320514601.txt"); return null;
             
             } 
            }

           }</CommandContent>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>PingTest</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"http://capetown.spdtst.saix.net/"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Pingtest</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Gaming Mix</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"E:\music\Playlists\GamingMix.xspf"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Gaming Mix</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Beep</ButtonName>
    <CommandContent>using System;
using System.Threading;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            { 

    
int ab =1 ;
    while (ab&gt; 0)
{
ab -= 1;
Thread.Sleep(1000);

}
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
         
               return null;
             } 
            }
           }</CommandContent>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Music Folder</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
using Microsoft.VisualBasic;
using System.Runtime.InteropServices;

namespace MyNamespace
{
    public class MyClass
    {
        [DllImport("user32")]
        private static extern bool SetForegroundWindow(IntPtr hwnd);
        public object DynamicCode(params object[] Parameters)
        {
 //code goes here
            ProcessStartInfo StartInformation = new ProcessStartInfo();

            StartInformation.FileName = @"E:\music";
            StartInformation.WindowStyle = ProcessWindowStyle.Maximized;
            Process PS = Process.Start(StartInformation);

           
            if (PS != null)
            {
                PS.WaitForInputIdle(1000);
                MessageBox.Show("PROCESS IS ACTIVATING?");
                Microsoft.VisualBasic.Interaction.AppActivate(PS.Id);
            }
      
return null;
 
        }
        

             }
}
   </CommandContent>
    <VoiceTrigger>Open Music Folder</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Games Folder</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           System.Diagnostics.Process.Start(@"E:\Games");

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Open Games Folder</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Hide/Show Shortcuts</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace MyNamespace
{
    public class MyClass
    {
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr GetWindow(IntPtr hWnd, GetWindow_Cmd uCmd);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);


        private const int WM_COMMAND = 0x111;


        static void ToggleDesktopIcons()
        {

            var toggleDesktopCommand = new IntPtr(0x7402);
 IntPtr hWnd = GetWindow(FindWindow("Progman", "Program Manager"), GetWindow_Cmd.GW_CHILD);
 SendMessage(hWnd, WM_COMMAND, toggleDesktopCommand, IntPtr.Zero);
        }


        public object DynamicCode(params object[] Parameters)
        { ToggleDesktopIcons();  return null; }
              //code goes here

        enum GetWindow_Cmd : uint
        {
            GW_HWNDFIRST = 0,
            GW_HWNDLAST = 1,
            GW_HWNDNEXT = 2,
            GW_HWNDPREV = 3,
            GW_OWNER = 4,
            GW_CHILD = 5,
            GW_ENABLEDPOPUP = 6

        }

    }
    }

       

        //   return null;
    

 </CommandContent>
    <VoiceTrigger>Toggle icons</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Speech</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Speech.Synthesis;
namespace MyNamespace
{
    public class MyClass
    {
        public object DynamicCode(params object[] Parameters)
        {
            //code goes here

            // Initialize a new instance of the SpeechSynthesizer.
            SpeechSynthesizer synth = new SpeechSynthesizer();

            // Configure the audio output. 
            synth.SetOutputToDefaultAudioDevice();
            synth.Rate = 3;
            // Speak a string.
            synth.Speak("Overlay Started, System Normal");

            return null;
        }
    }
}</CommandContent>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Weather</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Speech.Recognition;
using System.Windows;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.Speech.Synthesis;
namespace MyNamespace
    {
[XmlRoot(ElementName = "coord")]
    public class Coord
    {
        [XmlAttribute(AttributeName = "lon")]
        public string Lon { get; set; }
        [XmlAttribute(AttributeName = "lat")]
        public string Lat { get; set; }
    }

    [XmlRoot(ElementName = "sun")]
    public class Sun
    {
        [XmlAttribute(AttributeName = "rise")]
        public string Rise { get; set; }
        [XmlAttribute(AttributeName = "set")]
        public string Set { get; set; }
    }

    [XmlRoot(ElementName = "city")]
    public class City
    {
        [XmlElement(ElementName = "coord")]
        public Coord Coord { get; set; }
        [XmlElement(ElementName = "country")]
        public string Country { get; set; }
        [XmlElement(ElementName = "sun")]
        public Sun Sun { get; set; }
        [XmlAttribute(AttributeName = "id")]
        public string Id { get; set; }
        [XmlAttribute(AttributeName = "name")]
        public string Name { get; set; }
    }

    [XmlRoot(ElementName = "temperature")]
    public class Temperature
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "min")]
        public string Min { get; set; }
        [XmlAttribute(AttributeName = "max")]
        public string Max { get; set; }
        [XmlAttribute(AttributeName = "unit")]
        public string Unit { get; set; }
    }

    [XmlRoot(ElementName = "humidity")]
    public class Humidity
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "unit")]
        public string Unit { get; set; }
    }

    [XmlRoot(ElementName = "pressure")]
    public class Pressure
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "unit")]
        public string Unit { get; set; }
    }

    [XmlRoot(ElementName = "speed")]
    public class Speed
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "name")]
        public string Name { get; set; }
    }

    [XmlRoot(ElementName = "direction")]
    public class Direction
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "code")]
        public string Code { get; set; }
        [XmlAttribute(AttributeName = "name")]
        public string Name { get; set; }
    }

    [XmlRoot(ElementName = "wind")]
    public class Wind
    {
        [XmlElement(ElementName = "speed")]
        public Speed Speed { get; set; }
        [XmlElement(ElementName = "gusts")]
        public string Gusts { get; set; }
        [XmlElement(ElementName = "direction")]
        public Direction Direction { get; set; }
    }

    [XmlRoot(ElementName = "clouds")]
    public class Clouds
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "name")]
        public string Name { get; set; }
    }

    [XmlRoot(ElementName = "precipitation")]
    public class Precipitation
    {
        [XmlAttribute(AttributeName = "mode")]
        public string Mode { get; set; }
    }

    [XmlRoot(ElementName = "weather")]
    public class Weather
    {
        [XmlAttribute(AttributeName = "number")]
        public string Number { get; set; }
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
        [XmlAttribute(AttributeName = "icon")]
        public string Icon { get; set; }
    }

    [XmlRoot(ElementName = "lastupdate")]
    public class Lastupdate
    {
        [XmlAttribute(AttributeName = "value")]
        public string Value { get; set; }
    }

    [XmlRoot(ElementName = "current")]
    public class Current
    {
        [XmlElement(ElementName = "city")]
        public City City { get; set; }
        [XmlElement(ElementName = "temperature")]
        public Temperature Temperature { get; set; }
        [XmlElement(ElementName = "humidity")]
        public Humidity Humidity { get; set; }
        [XmlElement(ElementName = "pressure")]
        public Pressure Pressure { get; set; }
        [XmlElement(ElementName = "wind")]
        public Wind Wind { get; set; }
        [XmlElement(ElementName = "clouds")]
        public Clouds Clouds { get; set; }
        [XmlElement(ElementName = "visibility")]
        public string Visibility { get; set; }
        [XmlElement(ElementName = "precipitation")]
        public Precipitation Precipitation { get; set; }
        [XmlElement(ElementName = "weather")]
        public Weather Weather { get; set; }
        [XmlElement(ElementName = "lastupdate")]
        public Lastupdate Lastupdate { get; set; }
    }

    /// &lt;summary&gt;
    /// Interaction logic for MainWindow.xaml
    /// &lt;/summary&gt;
    /// 
   

        public class MyClass
        {
             public object DynamicCode(params object[] Parameters)
        {
            SpeechRecognitionEngine rec = new SpeechRecognitionEngine();
            XmlSchemaSet schemas = new XmlSchemaSet();
            //    schemas.Add(SpeechRecognitionDemo, "test");


            var xDoc = XDocument.Load("http://api.openweathermap.org/data/2.5/weather?id=3362671&amp;mode=xml&amp;units=Metric&amp;APPID=17732f1025bf120d2aa791ed1a844f6c");
            Console.WriteLine(xDoc);
            String XdocString = xDoc.ToString();
            XmlSerializer serializer = new XmlSerializer(typeof(Current));
            Current resultingMessage = (Current)serializer.Deserialize(new StringReader(XdocString));

            SpeechSynthesizer synth = new SpeechSynthesizer();

            // Configure the audio output. 
            synth.SetOutputToDefaultAudioDevice();
            synth.Rate = 3;
            synth.SelectVoice("Microsoft Zira Desktop");
            // Speak a string.
            synth.Speak("In " + resultingMessage.City.Name + ", The temperature is " + resultingMessage.Temperature.Value + "Degrees Celcius. The humidity, is " + resultingMessage.Humidity.Value + "Percent. weather looks like  " + resultingMessage.Weather.Value + ", and Wind Is Blowing " + resultingMessage.Wind.Speed.Value + "Kilometres per hour,"  + ",. " + " Cloudiness is  " + resultingMessage.Clouds.Value + "percent");

            return null;

        }
            }
           }</CommandContent>
    <VoiceTrigger>What is the weather</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Suits</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start("http://watch5s.to/search/?q=suits");  return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Suits</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Chilled Mix</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           
System.Diagnostics.Process.Start(@"E:\music\Playlists\Chilled.xspf"); return null;
             
             } 
            }

           }</CommandContent>
    <VoiceTrigger>Open Chilled Mix</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Sleep Mode</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
         Application.SetSuspendState(PowerState.Suspend, true, true);

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Sleep Computer</VoiceTrigger>
    <RequireAuth>true</RequireAuth>
  </Command>
  <Command>
    <ButtonName>ShutDown</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           Process.Start("shutdown","/s /t 0");

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Shut Down computer</VoiceTrigger>
    <RequireAuth>true</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Maintenance</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           Process.Start(@"C:\Program Files\CCleaner\CCleaner64.exe", " /AUTO");

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Run Maintenance</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>UDP TEST</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using NetworkCommsDotNet;
using NetworkCommsDotNet.Connections.UDP;
using System.Net;

namespace MyNamespace
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
            //Parse the necessary information out of the provided string
            string serverIP = "127.0.0.1";
            int serverPort = 1100;


           

                string messageToSend = "This is message #";


                //Send the message in a single line
                NetworkComms.SendObject("Message", serverIP, serverPort, messageToSend);

               
            

            //We have used comms so we make sure to call shutdown

               return null;
             } 
            }
           }</CommandContent>
    <RequireAuth>false</RequireAuth>
  </Command>
</ArrayOfCommand>