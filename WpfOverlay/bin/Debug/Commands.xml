<?xml version="1.0" encoding="utf-8"?>
<ArrayOfCommand xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Command>
    <ButtonName>OpenManager</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Runtime.InteropServices;
namespace WpfOverlay
    {
        public class MyClass
        {
        string action;
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           if(action == "youtube")
System.Diagnostics.Process.Start("https://www.youtube.com/feed/subscriptions");  
             
             else if(action == "twitch")
             System.Diagnostics.Process.Start("https://www.twitch.tv/directory");  
             
             else if(action == "gmail")
             System.Diagnostics.Process.Start("https://mail.google.com/mail/u/0/");  
             else if(action == "duolingo")
             System.Diagnostics.Process.Start(@"https://www.duolingo.com/"); 
             else if(action == "pingtest")
             System.Diagnostics.Process.Start(@"http://capetown.spdtst.saix.net/"); 
           
             return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Open &amp; string/stringname=action/youtube/twitch/gmail/smite/overwatch/duolingo/axxesse/pingtest/games folder/sat practice/music folder</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Beep</ButtonName>
    <CommandContent>using System;
using System.Threading;
using System.IO;
using System.Windows.Forms;

namespace WpfOverlay
    {
        public class MyClass
        {
        int five;
        int six;
            public object DynamicCode(params object[] Parameters)
            { 

    
int ab =1 ;
    while (ab&gt; 0)
{
ab -= 1;
Thread.Sleep(1000);

}
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
Console.Beep(800,100);
         
               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>test &amp;int/min=5/max=20/intname=Five&amp;&amp;int/min=5/max=20/intname=Six&amp;</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Hide/Show Shortcuts</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace WpfOverlay
{
    public class MyClass
    {
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr GetWindow(IntPtr hWnd, GetWindow_Cmd uCmd);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);


        private const int WM_COMMAND = 0x111;


        static void ToggleDesktopIcons()
        {

            var toggleDesktopCommand = new IntPtr(0x7402);
 IntPtr hWnd = GetWindow(FindWindow("Progman", "Program Manager"), GetWindow_Cmd.GW_CHILD);
 SendMessage(hWnd, WM_COMMAND, toggleDesktopCommand, IntPtr.Zero);
        }


        public object DynamicCode(params object[] Parameters)
        { ToggleDesktopIcons();  return null; }
              //code goes here

        enum GetWindow_Cmd : uint
        {
            GW_HWNDFIRST = 0,
            GW_HWNDLAST = 1,
            GW_HWNDNEXT = 2,
            GW_HWNDPREV = 3,
            GW_OWNER = 4,
            GW_CHILD = 5,
            GW_ENABLEDPOPUP = 6

        }

    }
    }

       

        //   return null;
    

 </CommandContent>
    <VoiceTrigger>Toggle icons</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Sleep Mode</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;

namespace WpfOverlay
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
         Application.SetSuspendState(PowerState.Suspend, true, true);

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Sleep Computer</VoiceTrigger>
    <RequireAuth>true</RequireAuth>
  </Command>
  <Command>
    <ButtonName>ForceClose</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace WpfOverlay
    {
        public class MyClass
        {
      
      
      [DllImport("user32.dll")]
      static extern IntPtr GetForegroundWindow();

      [DllImport("user32.dll")]
      public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint ProcessId);
      
      public object DynamicCode(params object[] Parameters)
            {
              //code goes here
            
       try
       {
        
        //main function
        
            int nProcessID = Process.GetCurrentProcess().Id;
            IntPtr hwnd = GetForegroundWindow();
            uint pid;
            GetWindowThreadProcessId(hwnd, out pid);
            Process Buffer = Process.GetProcessById((int)pid);      
            Process[] PA = Process.GetProcessesByName("WpfOverlay");
              

   
        if (Buffer == null || Buffer.HasExited) return null;

else if(Buffer.Id != PA[0].Id)
{

        Buffer.Kill();
        
        
        
}   
        }
catch(Exception E)
{
MessageBox.Show(E.ToString(), "ForceClose Script");
}
return null;
     
             } 
            }
           }
           </CommandContent>
    <VoiceTrigger>force close</VoiceTrigger>
    <RequireAuth>true</RequireAuth>
  </Command>
  <Command>
    <ButtonName>ForceMinimize</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace WpfOverlay
    {
        public class MyClass
        {
      [DllImport("user32.dll")]
      static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
      
      [DllImport("user32.dll")]
      static extern IntPtr GetForegroundWindow();

      [DllImport("user32.dll")]
      public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint ProcessId);
      
      public object DynamicCode(params object[] Parameters)
            {
              //code goes here
            
       try
       {
        
        //main function
        
            int nProcessID = Process.GetCurrentProcess().Id;
            IntPtr hwnd = GetForegroundWindow();
            uint pid;
            GetWindowThreadProcessId(hwnd, out pid);
            Process Buffer = Process.GetProcessById((int)pid);      
            Process[] PA = Process.GetProcessesByName("WpfOverlay");
              

   
        if (Buffer == null || Buffer.HasExited) return null;

else if(Buffer.Id != PA[0].Id)
{
  ShowWindow(Buffer.MainWindowHandle, 11); //11 is force minimize, 0 is hide, 3 is maximize        
}   
        }
catch(Exception E)
{
MessageBox.Show(E.ToString(), "ForceClose Script");
}
return null;
     
             } 
            }
           }
           </CommandContent>
    <VoiceTrigger>Minimize Current Window</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Close Chrome</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;

namespace WpfOverlay
    {
        public class MyClass
        {
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
           Process[] processes = Process.GetProcessesByName("chrome");
           
           foreach(Process P in processes)
           {
           if(P.MainWindowHandle != null)
           P.Kill();
           else continue;
           
           }

               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>Close Chrome</VoiceTrigger>
    <RequireAuth>true</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Time</ButtonName>
    <CommandContent>using System;
using System.IO;
using System.Windows.Forms;
using System.Diagnostics;
using System.Speech.Synthesis;

namespace WpfOverlay
    {
        public class MyClass
        {
        SpeechSynthesizer synth = new SpeechSynthesizer();
            public object DynamicCode(params object[] Parameters)
            {
              //code goes here
            synth.SetOutputToDefaultAudioDevice();
            synth.Rate = 3;
            synth.SelectVoice("Microsoft Zira Desktop");  
              
            var date = DateTime.Now;
                 
            synth.Speak(date.Minute + ", over  " + date.Hour );
               return null;
             } 
            }
           }</CommandContent>
    <VoiceTrigger>(whats the time | what is the time | time please )</VoiceTrigger>
    <RequireAuth>false</RequireAuth>
  </Command>
  <Command>
    <ButtonName>Tutorial</ButtonName>
    <CommandContent>Very unintuative tutorial, I Know.

Nevertheless:

This tutorial covers The Voice Trigger Language 

//Pro tip: You can hide the overlay with ALT + TAB and unhide it

//SYNTAX
'Very Important: between each different syntax/variable type you NEED to add an &amp; symbol. This is used to propperly split, define and recognise the command'
'Failure to do so will result in non working voice triggers'

First off, normal dialog. This consists of words, like: "Open youtube". 
When you say 'open youtube' the command the voice trigger is assigned 
to will be compiled.

example: open twitch


//Next We Have Multiple Choice Syntax.

Multiple Choice is represented by two braces like this: ()
Then between each choice you add the verticle bar | 

so it would look like this: (what is the weather | Weather please | what is the weather like)
saying any one of those phrases will compile the command the trigger is assigned to.

Currently multiple choice only supports normal dialog and not other syntax

//Next We Have Intiger And String values


Intiger: The intiger is usefull for adding a number to your voice recognition.

Example: &amp;int/min=1/max=10/intname=number&amp;

Every Syntax needs to be surrounded by &amp; symbols if any other syntax is present

The int needs to come first, it tells overlay we are using a number.
The min= value defines the minimum number. The default is 0
The max= value defines the maximum number, this is needed.
the intname= value is needed aswell. It tells overlay what the int name will be interface your code
the / is used to seperate each value. it should not be put before the first value or after the last(again you need the &amp; symbols there)


Then in your code you need to add the int with the intname name
saying the min or max number or anything inbetween will be recorded aswell
Overlay does not use the intname to recognize a command so it cannot stand alone
as a voice trigger
'IMPORTANT: intname needs to be lowercase in your code, as the voice trigger gets normalized to lowercase'

example voice trigger: open &amp;int/min=2/max=5/intname=count&amp; songs
example code:
namespace WpfOverlay
    {
        public class MyClass
        {
        int count;
            public object DynamicCode(params object[] Parameters)
            {
              //code to get songs directory 
             void OpenSongs(int HowMany)
             {
             //do stuff
             }
              
              
             OpenSongs(count);
               return null;
             } 
            }
           }


Strings: String are usefull for multiple choice strings that need to be passed to the code

example: open &amp;string/gmail/youtube/netflix/stringname=OpenType&amp;

open is just a normal value

string defines this syntax as a multiple choice string

gmail, youtube and netflix are the values used interface speech recognition

stringname= is the name of the string in your code


notes: as with intname, stringname needs to be lowercase in your code

how it works?: int and string syntax are used to pass the spoken values to your code via string injection before compiling.


example voice trigger: open &amp;string/gmail/youtube/netflix/stringname=OpenType&amp;

example code:

namespace WpfOverlay
    {
        public class MyClass
        {
        string opentype;//this needs to be lowercase even though in the trigger it is uppercase
            public object DynamicCode(params object[] Parameters)
            {
             
              if(opentype == "gmail")
               //open gmail
              else if(opentype == "youtube")
               //open youtube
               else if(opentype == "netflix")
               //open netflix
               return null;
             } 
            }
           }
           
           
Note: normal, string and int syntax can be used together as long as they are seperated with the &amp; symbols           
           </CommandContent>
    <RequireAuth>false</RequireAuth>
  </Command>
</ArrayOfCommand>